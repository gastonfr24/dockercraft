# Docker Compose con Cloudflare Tunnel integrado
# DockerCraft - Public Deployment
version: '3.8'

services:
  # Servidor de Minecraft
  minecraft:
    image: itzg/minecraft-server:latest
    container_name: mc-server
    restart: unless-stopped
    ports:
      - "25565:25565"  # Solo para acceso local
      - "25575:25575"  # RCON (solo localhost)
    environment:
      EULA: ${EULA:-TRUE}
      VERSION: ${VERSION:-1.21.1}
      TYPE: ${TYPE:-PAPER}
      MEMORY: ${MEMORY:-4G}
      MAX_PLAYERS: ${MAX_PLAYERS:-20}
      DIFFICULTY: ${DIFFICULTY:-normal}
      GAMEMODE: ${GAMEMODE:-survival}
      PVP: ${PVP:-true}
      VIEW_DISTANCE: ${VIEW_DISTANCE:-10}
      SIMULATION_DISTANCE: ${SIMULATION_DISTANCE:-10}
      LEVEL_NAME: ${LEVEL_NAME:-world}
      MOTD: "${MOTD:-A Minecraft Server via Cloudflare Tunnel}"
      SPAWN_PROTECTION: ${SPAWN_PROTECTION:-16}
      ENABLE_RCON: "true"
      RCON_PASSWORD: ${RCON_PASSWORD:-minecraft}
      RCON_PORT: 25575
      # Performance flags
      USE_AIKAR_FLAGS: "true"
      # Auto-pause cuando no hay jugadores
      ENABLE_AUTOPAUSE: ${ENABLE_AUTOPAUSE:-TRUE}
      AUTOPAUSE_TIMEOUT_EST: ${AUTOPAUSE_TIMEOUT_EST:-300}
      AUTOPAUSE_TIMEOUT_INIT: ${AUTOPAUSE_TIMEOUT_INIT:-60}
    volumes:
      - mc-data:/data
    healthcheck:
      test: ["CMD", "mc-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - minecraft-net

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      minecraft:
        condition: service_healthy
    networks:
      - minecraft-net
    environment:
      - TUNNEL_METRICS=0.0.0.0:9090
    # Opcional: exponer métricas de Cloudflare
    ports:
      - "9090:9090"  # Métricas (opcional)

volumes:
  mc-data:
    name: dockercraft-data

networks:
  minecraft-net:
    name: dockercraft-network
    driver: bridge

